"""Fix relationship between User and Course

Revision ID: aa4a837f881c
Revises: a53aa48881cf
Create Date: 2025-05-11 08:24:29.084046

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision = 'aa4a837f881c'
down_revision = 'a53aa48881cf'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Try to drop user_courses table if it exists
    try:
        op.drop_table('user_courses')
    except:
        pass  # Table might not exist, continue anyway
    
    # Simplify the approach to avoid complex SQL execution
    
    # First check if the courses table already has the columns we need
    inspector = sa.inspect(op.get_bind())
    columns = [col['name'] for col in inspector.get_columns('courses')]
    
    # Only add columns that don't already exist
    with op.batch_alter_table('courses', schema=None) as batch_op:
        if 'title' not in columns:
            batch_op.add_column(sa.Column('title', sa.String(length=255), nullable=True))
        if 'creator_id' not in columns:
            batch_op.add_column(sa.Column('creator_id', sa.Integer(), nullable=True))
        if 'category_id' not in columns:
            batch_op.add_column(sa.Column('category_id', sa.Integer(), nullable=True))
        if 'price' not in columns:
            batch_op.add_column(sa.Column('price', sa.Float(), nullable=True))
        if 'is_free' not in columns:
            batch_op.add_column(sa.Column('is_free', sa.Boolean(), nullable=True))
        if 'is_premium' not in columns:
            batch_op.add_column(sa.Column('is_premium', sa.Boolean(), nullable=True))
        if 'thumbnail' not in columns:
            batch_op.add_column(sa.Column('thumbnail', sa.String(length=255), nullable=True))
        if 'status' not in columns:
            batch_op.add_column(sa.Column('status', sa.String(length=20), nullable=True))
        if 'approval_notes' not in columns:
            batch_op.add_column(sa.Column('approval_notes', sa.Text(), nullable=True))
        if 'created_at' not in columns:
            batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        if 'updated_at' not in columns:
            batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
    
    # Update data and add constraints in a separate step
    try:
        # Update existing rows with default values using text()
        if 'name' in columns:
            op.execute(text("UPDATE courses SET title = name, status = 'approved', is_free = true"))
        else:
            op.execute(text("UPDATE courses SET title = 'Untitled Course', status = 'approved', is_free = true"))
            
        # Find the first user ID for creator_id
        result = op.get_bind().execute(text("SELECT id FROM users ORDER BY id LIMIT 1"))
        first_user_id = result.scalar()
        
        if first_user_id:
            op.execute(text(f"UPDATE courses SET creator_id = {first_user_id}"))
            
        # Now add constraints
        with op.batch_alter_table('courses', schema=None) as batch_op:
            if 'title' in columns:
                batch_op.alter_column('title', nullable=False)
            if 'creator_id' in columns and first_user_id:
                batch_op.alter_column('creator_id', nullable=False)
                
            # Add foreign key constraints if they don't exist
            batch_op.create_foreign_key(None, 'course_categories', ['category_id'], ['id'])
            batch_op.create_foreign_key(None, 'users', ['creator_id'], ['id'])
            
            # Drop old columns
            if 'name' in columns:
                batch_op.drop_column('name')
            if 'premium_only' in columns:
                batch_op.drop_column('premium_only')
            if 'category' in columns:
                batch_op.drop_column('category')
    except Exception as e:
        print(f"Warning: {e}")
        # Continue with migration even if data update fails
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        with op.batch_alter_table('courses', schema=None) as batch_op:
            # Add back the old columns
            batch_op.add_column(sa.Column('premium_only', sa.BOOLEAN(), autoincrement=False, nullable=True))
            batch_op.add_column(sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
            batch_op.add_column(sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
            
            # Copy data
            op.execute(text("UPDATE courses SET name = title, premium_only = is_premium"))
            
            # Make name non-nullable
            batch_op.alter_column('name', nullable=False)
            
            # Drop constraints and new columns
            batch_op.drop_constraint(None, type_='foreignkey')
            batch_op.drop_constraint(None, type_='foreignkey')
            batch_op.drop_column('updated_at')
            batch_op.drop_column('created_at')
            batch_op.drop_column('approval_notes')
            batch_op.drop_column('status')
            batch_op.drop_column('thumbnail')
            batch_op.drop_column('is_premium')
            batch_op.drop_column('is_free')
            batch_op.drop_column('price')
            batch_op.drop_column('category_id')
            batch_op.drop_column('creator_id')
            batch_op.drop_column('title')
    except Exception as e:
        print(f"Warning during downgrade: {e}")
    
    # Recreate user_courses table
    op.create_table('user_courses',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('course_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], name='user_courses_course_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_courses_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'course_id', name='user_courses_pkey')
    )
    # ### end Alembic commands ###